
R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "plot.counts"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('plot.counts')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("get_associated_values")
> ### * get_associated_values
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_associated_values
> ### Title: get_associated_values
> ### Aliases: get_associated_values
> ### Keywords: misc
> 
> ### ** Examples
> 
> descriptive = data.frame(matching_col1=c(1,1,2,2,3,3), matching_col2=c(16,17,16,17,16,17),irrelevant_col1=c(1,1,1,1,1,1),irrelevant_col2=c(16,18,20,15,2,-1))
> lookup=data.frame(match_col_1=c(1,1,1,2,2,2,3,3,3),match_col_2=c(16,17,17,16,17,17,16,17,17),value_col=c(1,2,2.5,4,3.5,3,6,5.5,NA),some_col=c(5,5,5,4,3,2,1,2,3))
> lookup_name_correspondence=matrix(data=c("matching_col1","match_col_1","matching_col2","match_col_2"),ncol=2,byrow=TRUE)
> lookup_value_col="value_col"
> assoc_vals=get_associated_values(descriptive_data=descriptive,lookup_data=lookup,lookup_name_correspondence=lookup_name_correspondence,FUN=sum,lookup_value_col=lookup_value_col,na.rm=TRUE)
> descriptive_and_associated=descriptive
> descriptive_and_associated$associated = assoc_vals
> cat("The base data: ")
The base data: > descriptive
  matching_col1 matching_col2 irrelevant_col1 irrelevant_col2
1             1            16               1              16
2             1            17               1              18
3             2            16               1              20
4             2            17               1              15
5             3            16               1               2
6             3            17               1              -1
> cat("The lookup table:")
The lookup table:> lookup
  match_col_1 match_col_2 value_col some_col
1           1          16       1.0        5
2           1          17       2.0        5
3           1          17       2.5        5
4           2          16       4.0        4
5           2          17       3.5        3
6           2          17       3.0        2
7           3          16       6.0        1
8           3          17       5.5        2
9           3          17        NA        3
> cat("The associated values found (here, the sum of corresponding lines):")
The associated values found (here, the sum of corresponding lines):> assoc_vals
[1] 1.0 4.5 4.0 6.5 6.0 5.5
> cat("The associated values in comparison with the base data:")
The associated values in comparison with the base data:> descriptive_and_associated
  matching_col1 matching_col2 irrelevant_col1 irrelevant_col2 associated
1             1            16               1              16        1.0
2             1            17               1              18        4.5
3             2            16               1              20        4.0
4             2            17               1              15        6.5
5             3            16               1               2        6.0
6             3            17               1              -1        5.5
> 
> 
> 
> cleanEx()
> nameEx("get_t_test_matrix")
> ### * get_t_test_matrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_t_test_matrix
> ### Title: Get a T-Test matrix comparing the results under different
> ###   treatments
> ### Aliases: get_t_test_matrix
> ### Keywords: misc
> 
> ### ** Examples
> 
> test_data=data.frame(condition=c(rep("A",5),rep("B",5),rep("C",8)),outcome=c(1,3,2,2.5,3.2,8,8.25,9,8.5,7.5,0.1,0.5,-0.5,0.2,-0.25,0,0,1))
> get_t_test_matrix(test_data$condition,test_data$outcome)
             A            B            C
A 1.000000e+00 5.855085e-06 2.848905e-03
B 5.855085e-06 1.000000e+00 1.218622e-08
C 2.848905e-03 1.218622e-08 1.000000e+00
> 
> 
> 
> cleanEx()
> nameEx("pie_with_errorbars")
> ### * pie_with_errorbars
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pie_with_errorbars
> ### Title: pie_with_errorbars
> ### Aliases: pie_with_errorbars
> ### Keywords: misc
> 
> ### ** Examples
> 
> pie_with_errorbars(x=c(1,2,3),sd_x=c(0.1,0.2,0))
Warning in rep(border, length.out = nx) :
  'x' is NULL so the result will be NULL
Warning in rep(lty, length.out = nx) :
  'x' is NULL so the result will be NULL
Warning in rep(density, length.out = nx) :
  'x' is NULL so the result will be NULL
> 
> 
> 
> 
> cleanEx()
> nameEx("plot_counts")
> ### * plot_counts
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_counts
> ### Title: plot_counts
> ### Aliases: plot_counts
> ### Keywords: misc
> 
> ### ** Examples
> 
> plot_counts(x=c(1,2,3),y=c(2,2,3),sd_y=c(1,1,0.5))
> 
> 
> 
> 
> cleanEx()
> nameEx("plot_dot_column")
> ### * plot_dot_column
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_dot_column
> ### Title: plot_dot_column
> ### Aliases: plot_dot_column
> ### Keywords: misc
> 
> ### ** Examples
> 
> plot_dot_column(x=c(1,2,3),y=c(2,2,3),sd_y=c(1,1,0.5))
Warning in plot.xy(xy.coords(x, y), type = type, ...) :
  "sd_y" is not a graphical parameter
Warning in plot.xy(xy.coords(x, y), type = type, ...) :
  "sd_y" is not a graphical parameter
Warning in plot.xy(xy.coords(x, y), type = type, ...) :
  "sd_y" is not a graphical parameter
> 
> 
> 
> 
> cleanEx()
> nameEx("sd_mean")
> ### * sd_mean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sd_mean
> ### Title: sd_mean
> ### Aliases: sd_mean
> ### Keywords: misc
> 
> ### ** Examples
> 
> x<-c(1,2,3,4,3.5,2.5,1)
> sd(x)
[1] 1.170063
> sd_mean(x)
[1] 0.4422423
> 
> 
> 
> 
> cleanEx()
> nameEx("significance_labels")
> ### * significance_labels
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: significance_labels
> ### Title: significance_labels
> ### Aliases: significance_labels
> ### Keywords: misc
> 
> ### ** Examples
> 
> 
> significance_labels(c(0.01,0.04,0.05,0.5))
[1] "**" "*"  "*"  ""  
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.129 0.011 0.15 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
